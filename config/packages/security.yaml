security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            pattern: ^/api
            stateless: true
            json_login:
                    check_path: app_api_login
                    username_path: email
                    success_handler: App\Security\LoginSuccessHandler 
            custom_authenticators:
                - App\Security\ApiTokenAuthenticator
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Public
        - { path: ^/api/registration, roles : PUBLIC_ACCESS}
        - { path: ^/api/login, roles : PUBLIC_ACCESS}
        - { path : ^/api/doc, roles : PUBLIC_ACCESS }
        - { path : ^/api/restaurant$, roles : PUBLIC_ACCESS }
        - { path : ^/api/restaurant/\d+$, roles : PUBLIC_ACCESS }
        - { path : ^/api/menu, roles : PUBLIC_ACCESS, methods: [GET] }
        - { path : ^/api/category, roles : PUBLIC_ACCESS, methods: [GET] }
        - { path : ^/api/food, roles : PUBLIC_ACCESS, methods: [GET] }
        - { path : ^/api/picture, roles : PUBLIC_ACCESS, methods: [GET] }

        # Admin uniquement
        - { path: ^/api/restaurant, roles: ROLE_ADMIN, methods: [POST, PUT, DELETE] }
        - { path: ^/api/menu, roles: ROLE_ADMIN, methods: [POST, PUT, DELETE] }
        - { path: ^/api/category, roles: ROLE_ADMIN, methods: [POST, PUT, DELETE] }
        - { path: ^/api/food, roles: ROLE_ADMIN, methods: [POST, PUT, DELETE] }
        - { path: ^/api/picture, roles: ROLE_ADMIN, methods: [POST, PUT, DELETE] }

        #Booking (utilsateur connecté)
        - { path: ^/api/booking, roles: ROLE_USER}

        # accès aux API par défaut pour les utilisateurs connectés
        - { path: ^/api, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
